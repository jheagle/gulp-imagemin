"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addPipeMethods = void 0;
var _nodeFs = require("node:fs");
var _nodeChild_process = require("node:child_process");
var _index = require("../../is-stream/index.js");
const isExecaChildProcess = target => target instanceof _nodeChild_process.ChildProcess && typeof target.then === 'function';
const pipeToTarget = (spawned, streamName, target) => {
  if (typeof target === 'string') {
    spawned[streamName].pipe((0, _nodeFs.createWriteStream)(target));
    return spawned;
  }
  if ((0, _index.isWritableStream)(target)) {
    spawned[streamName].pipe(target);
    return spawned;
  }
  if (!isExecaChildProcess(target)) {
    throw new TypeError('The second argument must be a string, a stream or an Execa child process.');
  }
  if (!(0, _index.isWritableStream)(target.stdin)) {
    throw new TypeError('The target child process\'s stdin must be available.');
  }
  spawned[streamName].pipe(target.stdin);
  return target;
};
const addPipeMethods = spawned => {
  if (spawned.stdout !== null) {
    spawned.pipeStdout = pipeToTarget.bind(undefined, spawned, 'stdout');
  }
  if (spawned.stderr !== null) {
    spawned.pipeStderr = pipeToTarget.bind(undefined, spawned, 'stderr');
  }
  if (spawned.all !== undefined) {
    spawned.pipeAll = pipeToTarget.bind(undefined, spawned, 'all');
  }
};
exports.addPipeMethods = addPipeMethods;