"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = imageminPngquant;
var _index = require("./node_modules/execa/index.js");
var _index2 = _interopRequireDefault(require("./node_modules/is-png/index.js"));
var _index3 = _interopRequireDefault(require("../pngquant-bin/index.js"));
var _index4 = _interopRequireDefault(require("../ow/dist/index.js"));
var _index5 = require("../uint8array-extras/index.js");
var _index6 = require("../environment/index.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function imageminPngquant(options = {}) {
  if (_index6.isBrowser) {
    throw new Error('This package does not work in the browser.');
  }
  return async input => {
    const isData = (0, _index5.isUint8Array)(input);
    if (!(0, _index5.isUint8Array)(input)) {
      throw new TypeError(`Expected a Uint8Array, got ${typeof input}`);
    }
    if (isData && !(0, _index2.default)(input)) {
      return input;
    }
    const arguments_ = ['-'];
    if (options.speed !== undefined) {
      (0, _index4.default)(options.speed, _index4.default.number.integer.inRange(1, 11));
      arguments_.push('--speed', options.speed.toString());
    }
    if (options.strip !== undefined) {
      (0, _index4.default)(options.strip, _index4.default.boolean);
      if (options.strip) {
        arguments_.push('--strip');
      }
    }
    if (options.quality !== undefined) {
      (0, _index4.default)(options.quality, _index4.default.array.length(2).ofType(_index4.default.number.inRange(0, 1)));
      const [min, max] = options.quality;
      arguments_.push('--quality', `${Math.round(min * 100)}-${Math.round(max * 100)}`);
    }
    if (options.dithering !== undefined) {
      (0, _index4.default)(options.dithering, _index4.default.any(_index4.default.number.inRange(0, 1), _index4.default.boolean.false));
      if (typeof options.dithering === 'number') {
        arguments_.push(`--floyd=${options.dithering}`);
      } else if (options.dithering === false) {
        arguments_.push('--ordered');
      }
    }
    if (options.posterize !== undefined) {
      (0, _index4.default)(options.posterize, _index4.default.number);
      arguments_.push('--posterize', options.posterize.toString());
    }
    try {
      const {
        stdout
      } = await (0, _index.execa)(_index3.default, arguments_, {
        encoding: 'buffer',
        maxBuffer: Number.POSITIVE_INFINITY,
        input
      });
      return stdout;
    } catch (error) {
      // Handling special condition from pngquant binary (status code 99).
      if (error.exitCode === 99) {
        return input;
      }
      throw error;
    }
  };
}