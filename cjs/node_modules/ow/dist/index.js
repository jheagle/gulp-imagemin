"use strict";

require("core-js/modules/esnext.async-iterator.for-each.js");
require("core-js/modules/esnext.iterator.constructor.js");
require("core-js/modules/esnext.iterator.for-each.js");
require("core-js/modules/esnext.weak-map.delete-all.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  ArgumentError: true,
  Predicate: true
};
Object.defineProperty(exports, "ArgumentError", {
  enumerable: true,
  get: function () {
    return _argumentError.ArgumentError;
  }
});
Object.defineProperty(exports, "Predicate", {
  enumerable: true,
  get: function () {
    return _predicate.Predicate;
  }
});
exports.default = void 0;
var _index = _interopRequireDefault(require("../../callsites/index.js"));
var _inferLabel = require("./utils/infer-label.js");
var _basePredicate = require("./predicates/base-predicate.js");
var _modifiers = _interopRequireDefault(require("./modifiers.js"));
var _predicates = _interopRequireWildcard(require("./predicates.js"));
Object.keys(_predicates).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _predicates[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _predicates[key];
    }
  });
});
var _test = _interopRequireDefault(require("./test.js"));
var _argumentError = require("./argument-error.js");
var _predicate = require("./predicates/predicate.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const ow = (value, labelOrPredicate, predicate) => {
  if (!(0, _basePredicate.isPredicate)(labelOrPredicate) && typeof labelOrPredicate !== 'string') {
    throw new TypeError(`Expected second argument to be a predicate or a string, got \`${typeof labelOrPredicate}\``);
  }
  if ((0, _basePredicate.isPredicate)(labelOrPredicate)) {
    // If the second argument is a predicate, infer the label
    const stackFrames = (0, _index.default)();
    (0, _test.default)(value, () => (0, _inferLabel.inferLabel)(stackFrames), labelOrPredicate);
    return;
  }
  (0, _test.default)(value, labelOrPredicate, predicate);
};
Object.defineProperties(ow, {
  isValid: {
    value(value, predicate) {
      try {
        (0, _test.default)(value, '', predicate);
        return true;
      } catch {
        return false;
      }
    }
  },
  create: {
    value: (labelOrPredicate, predicate) => (value, label) => {
      if ((0, _basePredicate.isPredicate)(labelOrPredicate)) {
        const stackFrames = (0, _index.default)();
        (0, _test.default)(value, label ?? (() => (0, _inferLabel.inferLabel)(stackFrames)), labelOrPredicate);
        return;
      }
      (0, _test.default)(value, label ?? labelOrPredicate, predicate);
    }
  }
});
// Can't use `export default predicates(modifiers(ow)) as Ow` because the variable needs a type annotation to avoid a compiler error when used:
// Assertions require every name in the call target to be declared with an explicit type annotation.ts(2775)
// See https://github.com/microsoft/TypeScript/issues/36931 for more details.
const _ow = (0, _predicates.default)((0, _modifiers.default)(ow));
var _default = exports.default = _ow;