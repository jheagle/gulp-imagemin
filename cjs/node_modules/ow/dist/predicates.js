"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AnyPredicate", {
  enumerable: true,
  get: function () {
    return _any.AnyPredicate;
  }
});
Object.defineProperty(exports, "ArrayBufferPredicate", {
  enumerable: true,
  get: function () {
    return _arrayBuffer.ArrayBufferPredicate;
  }
});
Object.defineProperty(exports, "ArrayPredicate", {
  enumerable: true,
  get: function () {
    return _array.ArrayPredicate;
  }
});
Object.defineProperty(exports, "BigIntPredicate", {
  enumerable: true,
  get: function () {
    return _bigint.BigIntPredicate;
  }
});
Object.defineProperty(exports, "BooleanPredicate", {
  enumerable: true,
  get: function () {
    return _boolean.BooleanPredicate;
  }
});
Object.defineProperty(exports, "DataViewPredicate", {
  enumerable: true,
  get: function () {
    return _dataView.DataViewPredicate;
  }
});
Object.defineProperty(exports, "DatePredicate", {
  enumerable: true,
  get: function () {
    return _date.DatePredicate;
  }
});
Object.defineProperty(exports, "ErrorPredicate", {
  enumerable: true,
  get: function () {
    return _error.ErrorPredicate;
  }
});
Object.defineProperty(exports, "MapPredicate", {
  enumerable: true,
  get: function () {
    return _map.MapPredicate;
  }
});
Object.defineProperty(exports, "NumberPredicate", {
  enumerable: true,
  get: function () {
    return _number.NumberPredicate;
  }
});
Object.defineProperty(exports, "ObjectPredicate", {
  enumerable: true,
  get: function () {
    return _object.ObjectPredicate;
  }
});
Object.defineProperty(exports, "SetPredicate", {
  enumerable: true,
  get: function () {
    return _set.SetPredicate;
  }
});
Object.defineProperty(exports, "StringPredicate", {
  enumerable: true,
  get: function () {
    return _string.StringPredicate;
  }
});
Object.defineProperty(exports, "TypedArrayPredicate", {
  enumerable: true,
  get: function () {
    return _typedArray.TypedArrayPredicate;
  }
});
Object.defineProperty(exports, "WeakMapPredicate", {
  enumerable: true,
  get: function () {
    return _weakMap.WeakMapPredicate;
  }
});
Object.defineProperty(exports, "WeakSetPredicate", {
  enumerable: true,
  get: function () {
    return _weakSet.WeakSetPredicate;
  }
});
exports.default = void 0;
var _string = require("./predicates/string.js");
var _number = require("./predicates/number.js");
var _bigint = require("./predicates/bigint.js");
var _boolean = require("./predicates/boolean.js");
var _predicate = require("./predicates/predicate.js");
var _array = require("./predicates/array.js");
var _object = require("./predicates/object.js");
var _date = require("./predicates/date.js");
var _error = require("./predicates/error.js");
var _map = require("./predicates/map.js");
var _weakMap = require("./predicates/weak-map.js");
var _set = require("./predicates/set.js");
var _weakSet = require("./predicates/weak-set.js");
var _typedArray = require("./predicates/typed-array.js");
var _arrayBuffer = require("./predicates/array-buffer.js");
var _dataView = require("./predicates/data-view.js");
var _any = require("./predicates/any.js");
const predicates = (object, options) => {
  Object.defineProperties(object, {
    string: {
      get: () => new _string.StringPredicate(options)
    },
    number: {
      get: () => new _number.NumberPredicate(options)
    },
    bigint: {
      get: () => new _bigint.BigIntPredicate(options)
    },
    boolean: {
      get: () => new _boolean.BooleanPredicate(options)
    },
    undefined: {
      get: () => new _predicate.Predicate('undefined', options)
    },
    null: {
      get: () => new _predicate.Predicate('null', options)
    },
    nullOrUndefined: {
      get: () => new _predicate.Predicate('nullOrUndefined', options)
    },
    nan: {
      get: () => new _predicate.Predicate('nan', options)
    },
    symbol: {
      get: () => new _predicate.Predicate('symbol', options)
    },
    array: {
      get: () => new _array.ArrayPredicate(options)
    },
    object: {
      get: () => new _object.ObjectPredicate(options)
    },
    date: {
      get: () => new _date.DatePredicate(options)
    },
    error: {
      get: () => new _error.ErrorPredicate(options)
    },
    map: {
      get: () => new _map.MapPredicate(options)
    },
    weakMap: {
      get: () => new _weakMap.WeakMapPredicate(options)
    },
    set: {
      get: () => new _set.SetPredicate(options)
    },
    weakSet: {
      get: () => new _weakSet.WeakSetPredicate(options)
    },
    function: {
      get: () => new _predicate.Predicate('Function', options)
    },
    buffer: {
      get: () => new _predicate.Predicate('Buffer', options)
    },
    regExp: {
      get: () => new _predicate.Predicate('RegExp', options)
    },
    promise: {
      get: () => new _predicate.Predicate('Promise', options)
    },
    typedArray: {
      get: () => new _typedArray.TypedArrayPredicate('TypedArray', options)
    },
    int8Array: {
      get: () => new _typedArray.TypedArrayPredicate('Int8Array', options)
    },
    uint8Array: {
      get: () => new _typedArray.TypedArrayPredicate('Uint8Array', options)
    },
    uint8ClampedArray: {
      get: () => new _typedArray.TypedArrayPredicate('Uint8ClampedArray', options)
    },
    int16Array: {
      get: () => new _typedArray.TypedArrayPredicate('Int16Array', options)
    },
    uint16Array: {
      get: () => new _typedArray.TypedArrayPredicate('Uint16Array', options)
    },
    int32Array: {
      get: () => new _typedArray.TypedArrayPredicate('Int32Array', options)
    },
    uint32Array: {
      get: () => new _typedArray.TypedArrayPredicate('Uint32Array', options)
    },
    float32Array: {
      get: () => new _typedArray.TypedArrayPredicate('Float32Array', options)
    },
    float64Array: {
      get: () => new _typedArray.TypedArrayPredicate('Float64Array', options)
    },
    arrayBuffer: {
      get: () => new _arrayBuffer.ArrayBufferPredicate('ArrayBuffer', options)
    },
    sharedArrayBuffer: {
      get: () => new _arrayBuffer.ArrayBufferPredicate('SharedArrayBuffer', options)
    },
    dataView: {
      get: () => new _dataView.DataViewPredicate(options)
    },
    iterable: {
      get: () => new _predicate.Predicate('Iterable', options)
    },
    any: {
      value: (...predicates) => new _any.AnyPredicate(predicates, options)
    }
  });
  return object;
};
var _default = exports.default = predicates;