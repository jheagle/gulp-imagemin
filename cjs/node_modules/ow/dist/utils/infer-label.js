"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inferLabel = void 0;
var _nodeFs = _interopRequireDefault(require("node:fs"));
var _index = require("../../../environment/index.js");
var _index2 = _interopRequireDefault(require("../../../is-identifier/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// Regex to extract the label out of the `ow` function call
const labelRegex = /^.*?\((?<label>.*?)[,)]/;
/**
Infer the label of the caller.

@hidden

@param callsites - List of stack frames.
*/
const inferLabel = callsites => {
  if (!_index.isNode) {
    // Exit if we are not running in a Node.js environment
    return;
  }
  // Grab the stackframe with the `ow` function call
  const functionCallStackFrame = callsites[1];
  if (!functionCallStackFrame) {
    return;
  }
  const fileName = functionCallStackFrame.getFileName();
  const lineNumber = functionCallStackFrame.getLineNumber();
  const columnNumber = functionCallStackFrame.getColumnNumber();
  if (fileName === null || lineNumber === null || columnNumber === null) {
    return;
  }
  let content = [];
  try {
    content = _nodeFs.default.readFileSync(fileName, 'utf8').split('\n');
  } catch {
    return;
  }
  let line = content[lineNumber - 1];
  if (!line) {
    // Exit if the line number couldn't be found
    return;
  }
  line = line.slice(columnNumber - 1);
  const match = labelRegex.exec(line);
  const token = match?.groups?.['label'];
  if (!token) {
    // Exit if we didn't find a label
    return;
  }
  // @ts-expect-error - Doesn't seem like something I can work around.
  if ((0, _index2.default)(token) || (0, _index2.default)(token.split('.').pop() ?? '')) {
    // eslint-disable-line @typescript-eslint/no-unsafe-call
    return token;
  }
  return;
};
exports.inferLabel = inferLabel;