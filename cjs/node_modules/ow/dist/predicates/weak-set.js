"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WeakSetPredicate = void 0;
require("core-js/modules/esnext.async-iterator.some.js");
require("core-js/modules/esnext.iterator.constructor.js");
require("core-js/modules/esnext.iterator.some.js");
var _hasItems = _interopRequireDefault(require("../utils/has-items.js"));
var _predicate = require("./predicate.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class WeakSetPredicate extends _predicate.Predicate {
  /**
  @hidden
  */
  constructor(options) {
    super('WeakSet', options);
  }
  /**
  Test a WeakSet to include all the provided items. The items are tested by identity, not structure.
   @param items - The items that should be a item in the WeakSet.
  */
  has(...items) {
    return this.addValidator({
      message: (_, label, missingItems) => `Expected ${label} to have items \`${JSON.stringify(missingItems)}\``,
      validator: set => (0, _hasItems.default)(set, items)
    });
  }
  /**
  Test a WeakSet to include any of the provided items. The items are tested by identity, not structure.
   @param items - The items that could be a item in the WeakSet.
  */
  hasAny(...items) {
    return this.addValidator({
      message: (_, label) => `Expected ${label} to have any item of \`${JSON.stringify(items)}\``,
      validator: set => items.some(item => set.has(item))
    });
  }
}
exports.WeakSetPredicate = WeakSetPredicate;