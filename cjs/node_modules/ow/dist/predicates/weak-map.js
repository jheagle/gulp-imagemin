"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WeakMapPredicate = void 0;
require("core-js/modules/esnext.async-iterator.some.js");
require("core-js/modules/esnext.iterator.constructor.js");
require("core-js/modules/esnext.iterator.some.js");
var _hasItems = _interopRequireDefault(require("../utils/has-items.js"));
var _predicate = require("./predicate.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
class WeakMapPredicate extends _predicate.Predicate {
  /**
  @hidden
  */
  constructor(options) {
    super('WeakMap', options);
  }
  /**
  Test a WeakMap to include all the provided keys. The keys are tested by identity, not structure.
   @param keys - The keys that should be a key in the WeakMap.
  */
  hasKeys(...keys) {
    return this.addValidator({
      message: (_, label, missingKeys) => `Expected ${label} to have keys \`${JSON.stringify(missingKeys)}\``,
      validator: map => (0, _hasItems.default)(map, keys)
    });
  }
  /**
  Test a WeakMap to include any of the provided keys. The keys are tested by identity, not structure.
   @param keys - The keys that could be a key in the WeakMap.
  */
  hasAnyKeys(...keys) {
    return this.addValidator({
      message: (_, label) => `Expected ${label} to have any key of \`${JSON.stringify(keys)}\``,
      validator: map => keys.some(key => map.has(key))
    });
  }
}
exports.WeakMapPredicate = WeakMapPredicate;