"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = functionTimeout;
exports.isTimeoutError = isTimeoutError;
var _nodeVm = _interopRequireDefault(require("node:vm"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const script = new _nodeVm.default.Script('returnValue = functionToRun()');

// TODO: Document the `context` option and add to types when I know it's something I want to keep.

// If you use the `context` option, you do it at your own risk.
function functionTimeout(function_, {
  timeout,
  context = _nodeVm.default.createContext()
} = {}) {
  const wrappedFunction = (...arguments_) => {
    context.functionToRun = () => function_(...arguments_);
    script.runInNewContext(context, {
      timeout
    });
    return context.returnValue;
  };
  Object.defineProperty(wrappedFunction, 'name', {
    value: `functionTimeout(${function_.name || '<anonymous>'})`,
    configurable: true
  });
  return wrappedFunction;
}
function isTimeoutError(error) {
  return error?.code === 'ERR_SCRIPT_EXECUTION_TIMEOUT';
}