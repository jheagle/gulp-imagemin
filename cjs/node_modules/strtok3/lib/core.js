"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "EndOfStreamError", {
  enumerable: true,
  get: function () {
    return _index.EndOfStreamError;
  }
});
exports.fromBuffer = fromBuffer;
exports.fromStream = fromStream;
var _ReadStreamTokenizer = require("./ReadStreamTokenizer.js");
var _BufferTokenizer = require("./BufferTokenizer.js");
var _index = require("../../peek-readable/lib/index.js");
/**
 * Construct ReadStreamTokenizer from given Stream.
 * Will set fileSize, if provided given Stream has set the .path property/
 * @param stream - Read from Node.js Stream.Readable
 * @param fileInfo - Pass the file information, like size and MIME-type of the corresponding stream.
 * @returns ReadStreamTokenizer
 */
function fromStream(stream, fileInfo) {
  fileInfo = fileInfo ? fileInfo : {};
  return new _ReadStreamTokenizer.ReadStreamTokenizer(stream, fileInfo);
}
/**
 * Construct ReadStreamTokenizer from given Buffer.
 * @param uint8Array - Uint8Array to tokenize
 * @param fileInfo - Pass additional file information to the tokenizer
 * @returns BufferTokenizer
 */
function fromBuffer(uint8Array, fileInfo) {
  return new _BufferTokenizer.BufferTokenizer(uint8Array, fileInfo);
}