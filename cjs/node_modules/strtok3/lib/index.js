"use strict";

require("core-js/modules/esnext.weak-map.delete-all.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "EndOfStreamError", {
  enumerable: true,
  get: function () {
    return core.EndOfStreamError;
  }
});
Object.defineProperty(exports, "fromBuffer", {
  enumerable: true,
  get: function () {
    return core.fromBuffer;
  }
});
Object.defineProperty(exports, "fromFile", {
  enumerable: true,
  get: function () {
    return _FileTokenizer.fromFile;
  }
});
exports.fromStream = fromStream;
var fs = _interopRequireWildcard(require("./FsPromise.js"));
var core = _interopRequireWildcard(require("./core.js"));
var _FileTokenizer = require("./FileTokenizer.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Construct ReadStreamTokenizer from given Stream.
 * Will set fileSize, if provided given Stream has set the .path property.
 * @param stream - Node.js Stream.Readable
 * @param fileInfo - Pass additional file information to the tokenizer
 * @returns Tokenizer
 */
async function fromStream(stream, fileInfo) {
  fileInfo = fileInfo ? fileInfo : {};
  if (stream.path) {
    const stat = await fs.stat(stream.path);
    fileInfo.path = stream.path;
    fileInfo.size = stat.size;
  }
  return core.fromStream(stream, fileInfo);
}