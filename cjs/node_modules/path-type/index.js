"use strict";

require("core-js/modules/esnext.weak-map.delete-all.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSymlinkSync = exports.isSymlink = exports.isFileSync = exports.isFile = exports.isDirectorySync = exports.isDirectory = void 0;
var _fs = _interopRequireWildcard(require("fs"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
async function isType(fsStatType, statsMethodName, filePath) {
  if (typeof filePath !== 'string') {
    throw new TypeError(`Expected a string, got ${typeof filePath}`);
  }
  try {
    const stats = await _fs.promises[fsStatType](filePath);
    return stats[statsMethodName]();
  } catch (error) {
    if (error.code === 'ENOENT') {
      return false;
    }
    throw error;
  }
}
function isTypeSync(fsStatType, statsMethodName, filePath) {
  if (typeof filePath !== 'string') {
    throw new TypeError(`Expected a string, got ${typeof filePath}`);
  }
  try {
    return _fs.default[fsStatType](filePath)[statsMethodName]();
  } catch (error) {
    if (error.code === 'ENOENT') {
      return false;
    }
    throw error;
  }
}
const isFile = exports.isFile = isType.bind(null, 'stat', 'isFile');
const isDirectory = exports.isDirectory = isType.bind(null, 'stat', 'isDirectory');
const isSymlink = exports.isSymlink = isType.bind(null, 'lstat', 'isSymbolicLink');
const isFileSync = exports.isFileSync = isTypeSync.bind(null, 'statSync', 'isFile');
const isDirectorySync = exports.isDirectorySync = isTypeSync.bind(null, 'statSync', 'isDirectory');
const isSymlinkSync = exports.isSymlinkSync = isTypeSync.bind(null, 'lstatSync', 'isSymbolicLink');